#!/usr/bin/env python3

import sys
import os
import getopt
import platform
import logging
import traceback

from ull.common import JsonFileConfigManager, AbstractPipelineComponent, handle_path_string, setup_logging, strip_quotes
from ull.pipeline import build_tree, run_tree, PipelineTreeNode2

__version__ = "1.0.0"

PROCESSES_ALLOWED = 1

GLOBALS = {}
FIRST_CHAR = "%"


def main(argv):
    """
Usage:
    ull-cli -C <json-config-file> [--verbosity=<level> --logging=<level>]

    json-config-file    JSON configuration file path.
    level               Can be one of [debug, info, warning, critical]

    """
    verbosity_options = {"none": logging.NOTSET, "debug": logging.DEBUG, "info": logging.INFO, "warning": logging.INFO,
                         "error": logging.ERROR, "critical": logging.CRITICAL}

    config_path     = None
    config_name     = None
    abs_config_path = None
    processes       = 1
    verbosity_level = logging.WARNING
    logging_level   = logging.NOTSET

    try:
        app_name = str(os.path.split(__file__)[1]).split(".")[0]

        print(app_name + " ver." + __version__)
        print("Python v." + platform.python_version())

        opts, args = getopt.getopt(argv, "hC:p:v:l:", ["help", "config=", "processes=", "verbosity=", "logging="])

        for opt, arg in opts:
            if opt in ("-h", "--help"):
                print(main.__doc__)
                return 0

            elif opt in ("-C", "--config"):
                config_path = handle_path_string(arg)
                abs_config_path, config_name = os.path.split(os.path.abspath(config_path))
                config_name = config_name[:config_name.find(".json")]

            elif opt in ("-p", "--processes"):
                processes = int(arg)

            elif opt in ("-v", "--verbosity"):
                verb_key = strip_quotes(arg)

                if verb_key not in verbosity_options.keys():
                    raise getopt.GetoptError("Wrong verbosity argument value: ()".format(verb_key))

                verbosity_level = verbosity_options[verb_key]
            elif opt in ("-l", "--logging"):
                log_key = strip_quotes(arg)

                if log_key not in verbosity_options.keys():
                    raise getopt.GetoptError("Wrong logging argument value: ()".format(log_key))

                logging_level = verbosity_options[log_key]

    except getopt.GetoptError as err:
        print(str(err))
        print(main.__doc__)
        return 1

    setup_logging(verbosity_level, logging_level, abs_config_path + "/" + config_name + ".log", "w")

    logger = logging.getLogger(app_name)

    # Get the number of CPUs available to the current process
    cpus_available = len(os.sched_getaffinity(0))

    # Number of processes should not exceed the number of CPUs the current process can use
    if processes > cpus_available:
        processes = cpus_available
        logger.warning("The number of processes changed to {} because of the system restriction".format(cpus_available))

    logger.debug("config_path: " + config_path)

    try:
        GLOBALS["ROOT"] = abs_config_path

        # Read JSON pipe line configuration
        cfgman = JsonFileConfigManager(config_path)

        # Get configuration parameters
        config = cfgman.get_config("", None)

        logger.debug("config: {}".format(config))

        execution_tree = build_tree(config, GLOBALS)

        logger.info("Execution tree has been built.")

        run_tree()

        PipelineTreeNode2.free_static_components()

    except KeyboardInterrupt:
        logger.warning("Ctrl+C triggered.")
        return 1

    except Exception as err:
        logger.critical(str(type(err)) + ": " + str(err))
        logger.debug(traceback.print_exc())
        return 1

    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
